[General]
network = TS_network

# Simulation setup and time
sim-time-limit = 1s

# Ethernet
*.*.ethernet.typename 	= "EthernetLayer"
*.*.eth[*].typename 	= "LayeredEthernetInterface"
*.*.eth[*].bitrate 		= 1 Gbps

# IPv4 network configurator with ARP
**.configurator.dumpAddresses = true
**.configurator.dumpTopology = true
**.configurator.dumpLinks = true
**.configurator.dumpRoutes = true
**.configurator.arp.typename = "GlobalArp"

*.*.ipv4.routingTable.netmaskRoutes = ""

*.configurator.config = xml("<config> \
    <interface hosts='**' address='10.0.0.x' netmask='255.255.255.0'/> \
</config>")

**.configurator.interfaces = "eth[*]"

# IP interface visualizer
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
# Application description: source applications
*.source1.numApps = 2
*.source2.numApps = 1
*.source3.numApps = 1
*.source4.numApps = 1
*.source5.numApps = 1

*.source*.app[*].typename = "UdpSourceApp"

# Stream 1: source5 ---> sink4
*.source5.app[0].typename = "UdpSourceApp"
*.source5.app[0].display-name = "iso1"
*.source5.app[0].io.destAddress = "sink4"
*.source5.app[0].io.destPort = 110
*.source5.app[0].source.packetLength = 100B
*.source5.app[0].source.productionInterval = 150us
*.source5.app[0].source.packetNameFormat = "iso1-%c"

# Stream 2: source2 ---> sink1
*.source2.app[0].typename = "UdpSourceApp"
*.source2.app[0].display-name = "iso2"
*.source2.app[0].io.destAddress = "sink1"
*.source2.app[0].io.destPort = 120
*.source2.app[0].source.packetLength = 100B
*.source2.app[0].source.productionInterval = 100us
*.source2.app[0].source.packetNameFormat = "iso2-%c"

# Stream 3: source1 ---> sink2
*.source1.app[0].typename = "UdpSourceApp"
*.source1.app[0].display-name = "iso3"
*.source1.app[0].io.destAddress = "sink2"
*.source1.app[0].io.destPort = 130
*.source1.app[0].source.packetLength = 100B
*.source1.app[0].source.productionInterval = 150us
*.source1.app[0].source.packetNameFormat = "iso3-%c"

# Stream 4: source3 ---> sink5
*.source3.app[0].typename = "UdpSourceApp"
*.source3.app[0].display-name = "iso4"
*.source3.app[0].io.destAddress = "sink5"
*.source3.app[0].io.destPort = 140
*.source3.app[0].source.packetLength = 100B
*.source3.app[0].source.productionInterval = 100us
*.source3.app[0].source.packetNameFormat = "iso4-%c"

# Stream 5: source4 ---> sink3
*.source4.app[0].typename = "UdpSourceApp"
*.source4.app[0].display-name = "iso5"
*.source4.app[0].io.destAddress = "sink3"
*.source4.app[0].io.destPort = 150
*.source4.app[0].source.packetLength = 100B
*.source4.app[0].source.productionInterval = 100us
*.source4.app[0].source.packetNameFormat = "iso5-%c"

# Stream 6: source1 ---> sink3
*.source1.app[1].typename = "UdpSourceApp"
*.source1.app[1].display-name = "iso6"
*.source1.app[1].io.destAddress = "sink3"
*.source1.app[1].io.destPort = 160
*.source1.app[1].source.packetLength = 100B
*.source1.app[1].source.productionInterval = 300us
*.source1.app[1].source.packetNameFormat = "iso6-%c"

# Define the source queues 
*.source*.eth[*].macLayer.queue.typename = "DropTailQueue"
*.source*.eth[*].macLayer.queue.packetCapacity = 300
*.source*.eth[*].macLayer.queue.dataCapacity = 363360b

# Define the stream identifiers 
**.source*.hasOutgoingStreams = true
**.source1.bridging.streamIdentifier.identifier.mapping = [{stream: "iso3", packetFilter: expr(has(udp) && udp != nullptr && udp.destPort == 130)},{stream: "iso6", packetFilter: expr(has(udp) && udp != nullptr && udp.destPort == 160)}]
**.source2.bridging.streamIdentifier.identifier.mapping = [{stream: "iso2", packetFilter: expr(has(udp) && udp != nullptr && udp.destPort == 120)}]
**.source3.bridging.streamIdentifier.identifier.mapping = [{stream: "iso4", packetFilter: expr(has(udp) && udp != nullptr && udp.destPort == 140)}]
**.source4.bridging.streamIdentifier.identifier.mapping = [{stream: "iso5", packetFilter: expr(has(udp) && udp != nullptr && udp.destPort == 150)}]
**.source5.bridging.streamIdentifier.identifier.mapping = [{stream: "iso1", packetFilter: expr(has(udp) && udp != nullptr && udp.destPort == 110)}]

# Define the sink applications 
**.sink1.numApps = 1
**.sink2.numApps = 1
**.sink3.numApps = 2
**.sink4.numApps = 1
**.sink5.numApps = 1

**.sink*.app[*].typename = "UdpSinkApp"
**.sink4.app[0].io.localPort = 110
**.sink1.app[0].io.localPort = 120
**.sink2.app[0].io.localPort = 130
**.sink5.app[0].io.localPort = 140
**.sink3.app[0].io.localPort = 150
**.sink3.app[1].io.localPort = 160

# List the processing delays for the nodes
*.GM*.ethernet.delayer.delay 	= 0us
*.source*.ethernet.delayer.delay 	= 0us
*.sink*.ethernet.delayer.delay 	= 0us
*.switch*.ethernet.delayer.delay 	= 1.55us

# Time Aware Shaper Initialization 

*.switch*.hasEgressTrafficShaping = true

*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
*.switch*.eth[*].macLayer.queue.queue[0].display-name = "iso"
*.switch*.eth[*].macLayer.queue.queue[1].display-name = "Gptp"
*.switch*.eth[*].macLayer.queue.typename = "GatingPriorityQueue"
*.switch*.eth[*].macLayer.queue.numQueues = 2
*.switch*.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.switch*.eth[*].macLayer.queue.classifier.packetFilters = ["iso*", "Gptp*"]
*.switch*.eth[*].macLayer.queue.scheduler.typename = "PriorityScheduler"
*.switch*.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"
*.switch*.eth[*].macLayer.**.queue[*].packetCapacity = 300
*.switch*.eth[*].macLayer.**.queue[*].dataCapacity = 363360b

# Specify the offsets for the sources 

*.source1.app[0].source.initialProductionOffset = 10us # Source 3
*.source1.app[1].source.initialProductionOffset = 129.2us # Source 6
*.source2.app[0].source.initialProductionOffset = 22.8us # Source 2
*.source3.app[0].source.initialProductionOffset = 16.4us # Source 4
*.source4.app[0].source.initialProductionOffset = 6.4us # Source 5
*.source5.app[0].source.initialProductionOffset = 0us # Source 1

# The initial gate states for switches and corresponding egress ports 

# Gate state for switch1 port 0
*.switch1.eth[0].macLayer.queue.gate[0].initiallyOpen = false
*.switch1.eth[0].macLayer.queue.gate[1].initiallyOpen = true
*.switch1.eth[0].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch2 port 1
*.switch2.eth[1].macLayer.queue.gate[0].initiallyOpen = false
*.switch2.eth[1].macLayer.queue.gate[1].initiallyOpen = true
*.switch2.eth[1].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch3 port 1
*.switch3.eth[1].macLayer.queue.gate[0].initiallyOpen = false
*.switch3.eth[1].macLayer.queue.gate[1].initiallyOpen = true
*.switch3.eth[1].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch4 port 1
*.switch4.eth[1].macLayer.queue.gate[0].initiallyOpen = false
*.switch4.eth[1].macLayer.queue.gate[1].initiallyOpen = true
*.switch4.eth[1].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch4 port 2
*.switch4.eth[2].macLayer.queue.gate[0].initiallyOpen = false
*.switch4.eth[2].macLayer.queue.gate[1].initiallyOpen = true
*.switch4.eth[2].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch4 port 3
*.switch4.eth[3].macLayer.queue.gate[0].initiallyOpen = false
*.switch4.eth[3].macLayer.queue.gate[1].initiallyOpen = true
*.switch4.eth[3].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch5 port 1
*.switch5.eth[1].macLayer.queue.gate[0].initiallyOpen = false
*.switch5.eth[1].macLayer.queue.gate[1].initiallyOpen = true
*.switch5.eth[1].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch5 port 2
*.switch5.eth[2].macLayer.queue.gate[0].initiallyOpen = false
*.switch5.eth[2].macLayer.queue.gate[1].initiallyOpen = true
*.switch5.eth[2].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch5 port 3
*.switch5.eth[3].macLayer.queue.gate[0].initiallyOpen = false
*.switch5.eth[3].macLayer.queue.gate[1].initiallyOpen = true
*.switch5.eth[3].macLayer.queue.gate[2].initiallyOpen = true

# Gate state for switch6 port 1
*.switch6.eth[1].macLayer.queue.gate[0].initiallyOpen = false
*.switch6.eth[1].macLayer.queue.gate[1].initiallyOpen = true
*.switch6.eth[1].macLayer.queue.gate[2].initiallyOpen = true


# Formulate the Gate Control Lists in the network 

# GCL of switch1 Egress port 0
*.switch1.eth[0].macLayer.queue.gate[*].durations = [10.3us,19.2us,87.2us,19.2us,24.4us,6.4us,50us,12.8us,70.5us,0us]

# GCL of switch2 Egress port 1
*.switch2.eth[1].macLayer.queue.gate[*].durations = [0.3us,32us,74.4us,6.4us,6.4us,19.2us,11.6us,6.4us,6.4us,6.4us,37.2us,6.4us,6.4us,12.8us,67.7us,0us]

# GCL of switch3 Egress port 1
*.switch3.eth[1].macLayer.queue.gate[*].durations = [3.1us,32us,74.4us,6.4us,6.4us,19.2us,11.6us,6.4us,6.4us,6.4us,37.2us,6.4us,6.4us,12.8us,64.9us,0us]

# GCL of switch4 Egress port 1
*.switch4.eth[1].macLayer.queue.gate[*].durations = [12.3us,19.2us,80.8us,6.4us,6.4us,6.4us,6.4us,6.4us,24.4us,6.4us,37.2us,6.4us,6.4us,6.4us,68.5us,0us]

# GCL of switch4 Egress port 2
*.switch4.eth[2].macLayer.queue.gate[*].durations = [31.5us,6.4us,93.6us,6.4us,93.6us,6.4us,62.1us,0us]

# GCL of switch4 Egress port 3
*.switch4.eth[3].macLayer.queue.gate[*].durations = [5.9us,6.4us,143.6us,6.4us,137.7us,0us]

# GCL of switch5 Egress port 1
*.switch5.eth[1].macLayer.queue.gate[*].durations = [15.1us,6.4us,93.6us,6.4us,19.2us,6.4us,68us,6.4us,78.5us,0us]

# GCL of switch5 Egress port 2
*.switch5.eth[2].macLayer.queue.gate[*].durations = [21.5us,6.4us,143.6us,6.4us,122.1us,0us]

# GCL of switch5 Egress port 3
*.switch5.eth[3].macLayer.queue.gate[*].durations = [27.9us,6.4us,93.6us,6.4us,93.6us,6.4us,65.7us,0us]

# GCL of switch6 Egress port 1
*.switch6.eth[1].macLayer.queue.gate[*].durations = [17.9us,6.4us,93.6us,6.4us,19.2us,6.4us,68us,6.4us,75.7us,0us]

# Enable time synchronization
*.*.hasTimeSynchronization = true
**.oscillator.typename = "ConstantDriftOscillator"

# Enable oscillators in the GM
*.GM1*.app[*].source.clockModule = "^.^.clock"

# Clock configuration for GM
*.GM1.clock.typename = "SettableClock"
*.GM1.gptp.typename = "MultiDomainGptp"
*.GM1.gptp.numDomains = 1

# gPTP configuration for the GM

*.GM1.gptp.domain[*].clockModule = "GM1.clock"
*.GM1.gptp.domain[0].gptpNodeType = "MASTER_NODE"
*.GM1.gptp.domain[0].masterPorts = ["eth0"]

# Enable oscillators in the sources
*.source*.app[*].source.clockModule = "^.^.clock"

# Clock configuration for sources
*.source*.clock.typename = "SettableClock"
*.source*.gptp.typename = "MultiDomainGptp"
*.source*.gptp.numDomains = 1

# Enable gptp configuration for sources

*.source1.gptp.domain[*].clockModule = "source1.clock"
*.source1.gptp.domain[0].gptpNodeType = "SLAVE_NODE"
*.source1.gptp.domain[0].slavePort = "eth0"

*.source2.gptp.domain[*].clockModule = "source2.clock"
*.source2.gptp.domain[0].gptpNodeType = "SLAVE_NODE"
*.source2.gptp.domain[0].slavePort = "eth0"

*.source3.gptp.domain[*].clockModule = "source3.clock"
*.source3.gptp.domain[0].gptpNodeType = "SLAVE_NODE"
*.source3.gptp.domain[0].slavePort = "eth0"

*.source4.gptp.domain[*].clockModule = "source4.clock"
*.source4.gptp.domain[0].gptpNodeType = "SLAVE_NODE"
*.source4.gptp.domain[0].slavePort = "eth0"

*.source5.gptp.domain[*].clockModule = "source5.clock"
*.source5.gptp.domain[0].gptpNodeType = "SLAVE_NODE"
*.source5.gptp.domain[0].slavePort = "eth0"

# Enable oscillators in the switches
*.switch*.eth[*].macLayer.queue.gate[*].clockModule = "^.^.^.^.clock"

# Clock configuration for switches
*.switch*.hasGptp = true
*.switch*.clock.typename = "MultiClock"
*.switch*.clock.numClocks = 1
*.switch*.gptp.typename = "MultiDomainGptp"
*.switch*.gptp.numDomains = 1

# gPTP configuration for switches
*.switch1.gptp.domain[0].slavePort = "eth0"
*.switch1.gptp.domain[0].masterPorts = ["eth1", "eth2", "eth3"]
*.switch2.gptp.domain[0].slavePort = "eth4"
*.switch2.gptp.domain[0].masterPorts = ["eth0", "eth1", "eth2", "eth3"]
*.switch3.gptp.domain[0].slavePort = "eth0"
*.switch3.gptp.domain[0].masterPorts = ["eth1"]
*.switch4.gptp.domain[0].slavePort = "eth0"
*.switch4.gptp.domain[0].masterPorts = ["eth1", "eth2", "eth3"]
*.switch5.gptp.domain[0].slavePort = "eth0"
*.switch5.gptp.domain[0].masterPorts = ["eth1", "eth2", "eth3"]
*.switch6.gptp.domain[0].slavePort = "eth0"
*.switch6.gptp.domain[0].masterPorts = ["eth1"]

# gPTP configuration for sinks
*.sink*.clock.typename = "MultiClock"
*.sink*.clock.numClocks = 1
*.sink*.gptp.typename = "MultiDomainGptp"
*.sink*.gptp.numDomains = 1
*.sink1.gptp.clockModule = "sink1.clock"
*.sink1.gptp.domain[0].slavePort = "eth0"
*.sink2.gptp.clockModule = "sink2.clock"
*.sink2.gptp.domain[0].slavePort = "eth0"
*.sink3.gptp.clockModule = "sink3.clock"
*.sink3.gptp.domain[0].slavePort = "eth0"
*.sink4.gptp.clockModule = "sink4.clock"
*.sink4.gptp.domain[0].slavePort = "eth0"
*.sink5.gptp.clockModule = "sink5.clock"
*.sink5.gptp.domain[0].slavePort = "eth0"

# Clock drift of the GM
*.GM1.clock.oscillator.driftRate = 0 ppm

# Clock drift of the sources
*.source1.clock.oscillator.driftRate = -9 ppm
*.source2.clock.oscillator.driftRate = 8 ppm
*.source3.clock.oscillator.driftRate = 9 ppm
*.source4.clock.oscillator.driftRate = 0 ppm
*.source5.clock.oscillator.driftRate = 0 ppm

# Clock drift of the switches
*.switch1.clock.*.oscillator.driftRate = -9 ppm
*.switch2.clock.*.oscillator.driftRate = -5 ppm
*.switch3.clock.*.oscillator.driftRate = -8 ppm
*.switch4.clock.*.oscillator.driftRate = -7 ppm
*.switch5.clock.*.oscillator.driftRate = -5 ppm
*.switch6.clock.*.oscillator.driftRate = -2 ppm

# gPTP synchronization parameters
**.pdelayInitialOffset = 100 ns
*.*.gptp.domain[0].syncInterval = 125 ms
*.*.gptp.domain[0].syncInitialOffset = syncInterval * 0.01
*.*.gptp.*.syncError = 0 us

# Set all reference clocks to master clock so the time difference can be visualized
**.referenceClock = "GM1.clock"
